{"version":3,"sources":["ng://@sedeh/tagger/src/app/tagger/tagger.service.ts","ng://@sedeh/tagger/src/app/tagger/tagger.directive.ts","ng://@sedeh/tagger/src/app/tagger/tagger.module.ts"],"names":["TaggerService","storage","this","prototype","updateTag","id","tagged","info","item","getTaggedItems","push","session","setItem","i","indexOfTaggedItem","splice","result","indexOf","hasTaggedItem","getItem","Injectable","args","providedIn","WizardStorageService","taggerComponent","renderer","el","EventEmitter","keyup","event","which","target","click","position","top","left","size","setStyle","nativeElement","showTagger","flag","removeClass","addClass","Component","selector","template","Renderer2","ElementRef","Output","taggerDirective","viewRef","resolver","taggerService","setAttribute","componentFactory","resolveComponentFactory","componentRef","createComponent","domElem","rootNodes","appendChild","taggerBox","change","subscribe","onTagSelect","bind","focus","enter","tagger","taggerTag","taggedClass","taggableClass","hoverOut","sticky","rect","getBoundingClientRect","x","clientX","width","y","clientY","height","ngOnInit","split","s","taggerSize","taggerChanged","emit","Directive","ViewContainerRef","ComponentFactoryResolver","Input","HostListener","TaggerModule","NgModule","imports","CommonModule","WizardStorageModule","declarations","exports","entryComponents","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["/*\r\n*/\r\nimport { Injectable } from '@angular/core';\r\nimport { WizardStorageService } from '@sedeh/wizard-storage';\r\n\r\n@Injectable({\r\n\tprovidedIn: 'root'\r\n})\r\nexport class TaggerService {\r\n\r\n    constructor(private storage: WizardStorageService){}\r\n\r\n    updateTag(id: string, tagged: boolean, info: any) {\r\n        const item = this.getTaggedItems(id);\r\n        if (item) { \r\n            if (tagged) {\r\n                item.push(info);\r\n                this.storage.session.setItem(id, item);\r\n            } else {\r\n                const i = this.indexOfTaggedItem(id, info);\r\n                if (i >= 0) {\r\n                    item.splice(i, i+1);\r\n                    this.storage.session.setItem(id, item);\r\n                }\r\n            }\r\n        } else {\r\n            this.storage.session.setItem(id, tagged ? [info] : []);\r\n        }\r\n    }\r\n    indexOfTaggedItem(id: string,info: any){\r\n        const item = this.getTaggedItems(id);\r\n        let result = -1;\r\n        if (item) { \r\n            result = item.indexOf(info);\r\n        }\r\n        return result;\r\n    }\r\n    hasTaggedItem(id: string,info: any) {\r\n        return this.indexOfTaggedItem(id, info) >= 0;\r\n    }\r\n\r\n    getTaggedItems(id: string) {\r\n        return this.storage.session.getItem(id);\r\n    }\r\n}\r\n","import {\r\n    Directive,\r\n    Component,\r\n    ElementRef,\r\n    ViewContainerRef,\r\n    Input,\r\n    Output,\r\n    OnInit,\r\n    EventEmitter,\r\n    HostListener,\r\n    Renderer2,\r\n    ComponentRef,\r\n    EmbeddedViewRef,\r\n    ComponentFactoryResolver\r\n} from '@angular/core';\r\nimport { TaggerService } from './tagger.service';\r\n\r\n@Component({\r\n    selector: 'taggerBox',\r\n    template: `\r\n    <span \r\n        class=\"tagger {{taggedClass}}\" \r\n        tabindex=\"0\" \r\n        aria-hidden='true'\r\n        (keyup)=\"keyup($event)\"\r\n        (click)=\"change.emit($event)\"></span>\r\n    <span style=\"display:block;position:absolute;left:-9999px;top:-9999px;width:1px;height:1px\">\r\n    {{tagged ? 'tag this item' : 'remove tag of this item'}}\r\n    </span>\r\n    `,\r\n    styles: [\r\n        `:host{width: 14px;height: 14px;position: absolute;color: #fff;z-index: 2;}`,\r\n        `:host.hidden{top: -9999px !important;left:-9999px !important;}`,\r\n        `:host .tagger:hover{color: red}`,\r\n        `:host .tagger:focus{color: red}`\r\n    ],\r\n})\r\nexport class taggerComponent {\r\n    show = false\r\n    tagged = false;\r\n    taggedClass: string;\r\n    @Output() change = new EventEmitter();\r\n    constructor(private renderer: Renderer2,public el:ElementRef){}\r\n    keyup(event:any){if(event.which == 13){event.target.click()}}\r\n    position(top: string, left: string, size: string) {\r\n        this.renderer.setStyle(this.el.nativeElement,'top', top);\r\n        this.renderer.setStyle(this.el.nativeElement,'left', left);\r\n        this.renderer.setStyle(this.el.nativeElement,'font-size', size); \r\n    }\r\n    showTagger(flag: boolean) {\r\n        if (flag) {\r\n            this.renderer.removeClass(this.el.nativeElement, 'hidden');\r\n        } else {\r\n            this.renderer.addClass(this.el.nativeElement, 'hidden');\r\n        }\r\n    }\r\n}\r\n\r\n@Directive({\r\n    selector: '[tagger]'\r\n})\r\nexport class taggerDirective implements OnInit {\r\n    private taggerBox: any;\r\n\r\n    @Input() taggedClass = 'fa fa-minus-square';\r\n    @Input() taggableClass = 'fa fa-tag';\r\n    @Input() tagger: string;\r\n    @Input() taggerSize = 24;\r\n    @Input() position = 'top:left';\r\n    @Input() taggerTag: any;\r\n    @Input() sticky = false;\r\n \r\n    @Output(\"taggerChanged\")\r\n    taggerChanged = new EventEmitter();\r\n\r\n    @HostListener('focus',['$event'])\r\n\tfocus(event: any) {\r\n        this.taggerBox.showTagger(true);\r\n    }\r\n    @HostListener('mouseenter',['$event'])\r\n\tenter(event: any) {\r\n        this.taggerBox.tagged = this.taggerService.hasTaggedItem(this.tagger, this.taggerTag);\r\n        this.taggerBox.taggedClass = this.taggerBox.tagged ? this.taggedClass : this.taggableClass;\r\n        this.taggerBox.showTagger(true);\r\n    }\r\n    @HostListener('mouseout',['$event'])\r\n\thoverOut(event: any) {\r\n        if (!this.sticky && !event.target.showTagger) {\r\n            const rect = this.el.nativeElement.getBoundingClientRect();\r\n            if (event.x < rect.x ||\r\n                event.clientX >= (rect.x + rect.width) || \r\n                event.y < rect.y || \r\n                event.clientY >= (rect.y + rect.height)\r\n                ) {\r\n                this.taggerBox.showTagger(false);\r\n            }\r\n        }\r\n    }\r\n    constructor(\r\n        public el:ElementRef,\r\n        private viewRef: ViewContainerRef,\r\n        private resolver: ComponentFactoryResolver,\r\n        private taggerService: TaggerService,\r\n        private renderer: Renderer2\r\n    ) {\r\n        this.renderer.setStyle(this.el.nativeElement,'display','table');\r\n        this.renderer.setStyle(this.el.nativeElement,'position','relative');\r\n        this.renderer.setAttribute(this.el.nativeElement, 'tabindex', '0');\r\n        let componentFactory = this.resolver.resolveComponentFactory(taggerComponent);\r\n        const componentRef: ComponentRef<any> = this.viewRef.createComponent(componentFactory);\r\n        const domElem = (componentRef.hostView as EmbeddedViewRef < any > ).rootNodes[0] as HTMLElement;\r\n        this.el.nativeElement.appendChild(domElem);\r\n        this.taggerBox = (<taggerComponent>componentRef.instance);\r\n\r\n        this.taggerBox.change.subscribe(this.onTagSelect.bind(this));\r\n    }\r\n    \r\n\tngOnInit() {\r\n        const x = this.position.split(':');\r\n        const s = (this.taggerSize + 2) + 'px';\r\n        const top = x[0] === 'top' ? '5px' : (x[0] === 'bottom' ? 'calc(100% - '+s+')' : 'calc((100% - '+s+')/2)');\r\n        const left = x[1] === 'left' ? '5px' : (x[1] === 'right' ? 'calc(100% - '+s+')' : 'calc((100% - '+s+')/2)');\r\n        this.taggerBox.position(top, left, this.taggerSize + 'px');\r\n        this.taggerBox.tagged = this.taggerService.hasTaggedItem(this.tagger, this.taggerTag);\r\n        this.taggerBox.taggedClass = this.taggerBox.tagged ? this.taggedClass : this.taggableClass;\r\n        this.taggerBox.showTagger(this.sticky);\r\n    }\r\n    onTagSelect(event:any) {\r\n        this.taggerBox.tagged = !this.taggerBox.tagged;\r\n        this.taggerBox.taggedClass = this.taggerBox.tagged ? this.taggedClass : this.taggableClass;\r\n        this.taggerService.updateTag(this.tagger, this.taggerBox.tagged, this.taggerTag)\r\n        this.taggerChanged.emit(this.tagger);\r\n    }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { WizardStorageModule } from '@sedeh/wizard-storage';\r\n\r\nimport { taggerComponent, taggerDirective } from './tagger.directive';\r\nimport { TaggerService } from './tagger.service';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    WizardStorageModule\r\n  ],\r\n  declarations: [\r\n\t  taggerComponent,\r\n    taggerDirective\r\n  ],\r\n  exports: [\r\n    taggerDirective\r\n  ],\r\n  entryComponents: [\r\n    taggerComponent\r\n  ],\r\n  providers: [\r\n    TaggerService\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class TaggerModule {}\r\n"]}