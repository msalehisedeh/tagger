import * as tslib_1 from "tslib";
/*
*/
import { Injectable } from '@angular/core';
import { WizardStorageService } from '@sedeh/wizard-storage';
import * as i0 from "@angular/core";
import * as i1 from "@sedeh/wizard-storage";
let TaggerService = class TaggerService {
    constructor(storage) {
        this.storage = storage;
    }
    tagItem(id, info) {
        const item = this.getTaggedItems(id);
        if (item) {
            item.push(info);
            this.storage.session.setItem(id, item);
        }
        else {
            this.storage.session.setItem(id, [info]);
        }
    }
    releaseTaggedItem(id, info) {
        const item = this.getTaggedItems(id);
        if (item) {
            const i = this.indexOfTaggedItem(id, info);
            if (i >= 0) {
                item.splice(i, i + 1);
                this.storage.session.setItem(id, item);
            }
        }
        else {
            this.storage.session.setItem(id, []);
        }
    }
    indexOfTaggedItem(id, info) {
        const items = this.getTaggedItems(id);
        let result = -1;
        if (items && items.length) {
            const x = items[0];
            if (x.taggedItem) {
                items.map((item, i) => {
                    if (item.taggedItem == info) {
                        result = i;
                    }
                });
            }
            else {
                result = items.indexOf(info);
            }
        }
        return result;
    }
    hasTaggedItem(id, info) {
        return this.indexOfTaggedItem(id, info) >= 0;
    }
    getTaggedItems(id) {
        return this.storage.session.getItem(id);
    }
    setTaggedItems(id, list) {
        this.storage.session.setItem(id, list);
    }
};
TaggerService.ctorParameters = () => [
    { type: WizardStorageService }
];
TaggerService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TaggerService_Factory() { return new TaggerService(i0.ɵɵinject(i1.WizardStorageService)); }, token: TaggerService, providedIn: "root" });
TaggerService = tslib_1.__decorate([
    Injectable({
        providedIn: 'root'
    })
], TaggerService);
export { TaggerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFnZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9Ac2VkZWgvdGFnZ2VyLyIsInNvdXJjZXMiOlsic3JjL2FwcC90YWdnZXIvdGFnZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBO0VBQ0U7QUFDRixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDOzs7QUFVN0QsSUFBYSxhQUFhLEdBQTFCLE1BQWEsYUFBYTtJQUV0QixZQUFvQixPQUE2QjtRQUE3QixZQUFPLEdBQVAsT0FBTyxDQUFzQjtJQUFFLENBQUM7SUFFcEQsT0FBTyxDQUFDLEVBQVUsRUFBRSxJQUFTO1FBQ3pCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2hCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDMUM7YUFBTTtZQUNILElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzVDO0lBQ0wsQ0FBQztJQUNELGlCQUFpQixDQUFDLEVBQVUsRUFBRSxJQUFTO1FBQ25DLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsSUFBSSxJQUFJLEVBQUU7WUFDTixNQUFNLENBQUMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQzNDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDUixJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3BCLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDMUM7U0FDSjthQUFNO1lBQ0gsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztTQUN4QztJQUNMLENBQUM7SUFDRCxpQkFBaUIsQ0FBQyxFQUFVLEVBQUUsSUFBUztRQUNuQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3RDLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2hCLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDdkIsTUFBTSxDQUFDLEdBQUcsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25CLElBQUksQ0FBQyxDQUFDLFVBQVUsRUFBRTtnQkFDZCxLQUFLLENBQUMsR0FBRyxDQUNMLENBQUMsSUFBYSxFQUFFLENBQVMsRUFBRSxFQUFFO29CQUN6QixJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxFQUFFO3dCQUN6QixNQUFNLEdBQUcsQ0FBQyxDQUFDO3FCQUNkO2dCQUNMLENBQUMsQ0FDSixDQUFDO2FBQ0w7aUJBQU07Z0JBQ0gsTUFBTSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDaEM7U0FDSjtRQUNELE9BQU8sTUFBTSxDQUFDO0lBQ2xCLENBQUM7SUFDRCxhQUFhLENBQUMsRUFBVSxFQUFDLElBQVM7UUFDOUIsT0FBTyxJQUFJLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBRUQsY0FBYyxDQUFDLEVBQVU7UUFDckIsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7SUFDNUMsQ0FBQztJQUVELGNBQWMsQ0FBQyxFQUFVLEVBQUUsSUFBVztRQUNsQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQzNDLENBQUM7Q0FDSixDQUFBOztZQXJEZ0Msb0JBQW9COzs7QUFGeEMsYUFBYTtJQUh6QixVQUFVLENBQUM7UUFDWCxVQUFVLEVBQUUsTUFBTTtLQUNsQixDQUFDO0dBQ1csYUFBYSxDQXVEekI7U0F2RFksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiovXHJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgV2l6YXJkU3RvcmFnZVNlcnZpY2UgfSBmcm9tICdAc2VkZWgvd2l6YXJkLXN0b3JhZ2UnO1xyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUYWdJbmZvIHtcclxuICAgIHRhZ0RhdGU6IERhdGUsXHJcbiAgICB0YWdnZWRJdGVtOiBhbnlcclxufVxyXG5cclxuQEluamVjdGFibGUoe1xyXG5cdHByb3ZpZGVkSW46ICdyb290J1xyXG59KVxyXG5leHBvcnQgY2xhc3MgVGFnZ2VyU2VydmljZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBzdG9yYWdlOiBXaXphcmRTdG9yYWdlU2VydmljZSl7fVxyXG5cclxuICAgIHRhZ0l0ZW0oaWQ6IHN0cmluZywgaW5mbzogYW55KSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0VGFnZ2VkSXRlbXMoaWQpO1xyXG4gICAgICAgIGlmIChpdGVtKSB7IFxyXG4gICAgICAgICAgICBpdGVtLnB1c2goaW5mbyk7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXNzaW9uLnNldEl0ZW0oaWQsIGl0ZW0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXNzaW9uLnNldEl0ZW0oaWQsIFtpbmZvXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmVsZWFzZVRhZ2dlZEl0ZW0oaWQ6IHN0cmluZywgaW5mbzogYW55KSB7XHJcbiAgICAgICAgY29uc3QgaXRlbSA9IHRoaXMuZ2V0VGFnZ2VkSXRlbXMoaWQpO1xyXG4gICAgICAgIGlmIChpdGVtKSB7IFxyXG4gICAgICAgICAgICBjb25zdCBpID0gdGhpcy5pbmRleE9mVGFnZ2VkSXRlbShpZCwgaW5mbyk7XHJcbiAgICAgICAgICAgIGlmIChpID49IDApIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0uc3BsaWNlKGksIGkrMSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3JhZ2Uuc2Vzc2lvbi5zZXRJdGVtKGlkLCBpdGVtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RvcmFnZS5zZXNzaW9uLnNldEl0ZW0oaWQsIFtdKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBpbmRleE9mVGFnZ2VkSXRlbShpZDogc3RyaW5nLCBpbmZvOiBhbnkpe1xyXG4gICAgICAgIGNvbnN0IGl0ZW1zID0gdGhpcy5nZXRUYWdnZWRJdGVtcyhpZCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IC0xO1xyXG4gICAgICAgIGlmIChpdGVtcyAmJiBpdGVtcy5sZW5ndGgpIHsgXHJcbiAgICAgICAgICAgIGNvbnN0IHggPSBpdGVtc1swXTtcclxuICAgICAgICAgICAgaWYgKHgudGFnZ2VkSXRlbSkge1xyXG4gICAgICAgICAgICAgICAgaXRlbXMubWFwKFxyXG4gICAgICAgICAgICAgICAgICAgIChpdGVtOiBUYWdJbmZvLCBpOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW0udGFnZ2VkSXRlbSA9PSBpbmZvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9IGl0ZW1zLmluZGV4T2YoaW5mbyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIGhhc1RhZ2dlZEl0ZW0oaWQ6IHN0cmluZyxpbmZvOiBhbnkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmRleE9mVGFnZ2VkSXRlbShpZCwgaW5mbykgPj0gMDtcclxuICAgIH1cclxuXHJcbiAgICBnZXRUYWdnZWRJdGVtcyhpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcmFnZS5zZXNzaW9uLmdldEl0ZW0oaWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHNldFRhZ2dlZEl0ZW1zKGlkOiBzdHJpbmcsIGxpc3Q6IGFueVtdKSB7XHJcbiAgICAgICAgdGhpcy5zdG9yYWdlLnNlc3Npb24uc2V0SXRlbShpZCwgbGlzdCk7XHJcbiAgICB9XHJcbn1cclxuIl19